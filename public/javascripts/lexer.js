let Automaton = {
    string:
        `Q = {0, 1, 2, 4, 5, 6, 9, 11, 12, 13, 14, 101, 102}
    Алфавiт:
    Σ = {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ., :, =, ∗, +, −, /,(,), \\n, \\t}
    Функцiя переходiв:
    δ(0, Letter) = 1; δ(1, Letter) = 1; δ(1, Digit) = 1; δ(1, other) = 2;
    δ(0, Digit) = 4; δ(4, Digit) = 4; δ(4, dot) = 5; δ(5, Digit) = 5; δ(5, other) = 6;
    δ(4, other) = 9;
    δ(0, ':') = 11; δ(11,'=') = 12;    
    δ(11, other) = 102;
    δ(0, ws) = 0;
    δ(0, nl) = 13;
    δ(0, '+') = 14; δ(0, '−') = 14; 
    δ(0, '*') = 14; δ(0, '/') = 14; δ(0, '(') = 14; δ(0, ')') = 14;
    δ(0, other) = 101
    Стартовий стан: q0 = 0
    Множина заключних станiв: F = {2, 6, 9, 12, 13, 14, 101, 102}
    Заключнi стани, що потребують додаткової обробки:
    Fstar = {2, 6, 9}
    FERROR = {101, 102}`
}
const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 5000,
    timerProgressBar: true,
    didOpen: (toast) => {
        toast.addEventListener('mouseenter', Swal.stopTimer)
        toast.addEventListener('mouseleave', Swal.resumeTimer)
    }
})

let chartData = "{ \"class\": \"GraphLinksModel\",\n  \"nodeKeyProperty\": \"id\",\n  \"nodeDataArray\": [\n{\"text\":\"State 0\\nПочатковий\",\"id\":-3,\"loc\":\"365.1770457925335 -86.98595183355984\"},\n{\"text\":\"State 1\",\"id\":-4,\"loc\":\"493.23574611881094 -147.3647295903663\"},\n{\"text\":\"State 2\",\"id\":-5,\"loc\":\"638.4202770632951 -157.13973067454202\"},\n{\"text\":\"State 6\",\"id\":-6,\"loc\":\"685.9209171171706 -102.28246247645896\"},\n{\"text\":\"State 4\",\"id\":-7,\"loc\":\"564.4954905530559 -57.9108673757992\"},\n{\"text\":\"State 5\",\"id\":-8,\"loc\":\"652.2253919538476 -14.617388600831788\"},\n{\"text\":\"State 9\",\"id\":-9,\"loc\":\"462.7943005279105 -21.355422706375606\"},\n{\"text\":\"State 11\",\"id\":-10,\"loc\":\"185.85738883356137 -74.61914056907227\"},\n{\"text\":\"State 12\",\"id\":-11,\"loc\":\"99.55417248479033 -8.978023628860171\"},\n{\"text\":\"State 13\",\"id\":-12,\"loc\":\"360.11934977628516 -219.99947658653204\"},\n{\"text\":\"State 14\",\"id\":-13,\"loc\":\"279.425076495677 94.99847317202438\"},\n{\"text\":\"State 101\\nПомилка\",\"id\":-14,\"loc\":\"245.59692512397092 -201.48808109687235\"},\n{\"text\":\"State 102\\nПомилка\",\"id\":-15,\"loc\":\"123.69514811471652 -173.88890104218584\"}\n],\n  \"linkDataArray\": [\n{\"from\":-3,\"to\":-4,\"text\":\"Letter\",\"points\":[385.91580545885137,-86.98595183355984,405.8203517874552,-109.33012958270452,430.34993875530415,-123.34995356823568,460.2586800787719,-127.68813639686579]},\n{\"from\":-4,\"to\":-4,\"points\":[501.8600452669208,-117.48928098196785,522.1861606966082,-82.2834163372394,464.2853315410136,-82.2834163372394,484.6114469707011,-117.48928098196785],\"text\":\"Letter\"},\n{\"from\":-4,\"to\":-4,\"points\":[484.6114469707011,-147.3647295903663,464.28533154101353,-182.57059423509475,522.1861606966082,-182.57059423509475,501.8600452669208,-147.3647295903663],\"text\":\"Digit\"},\n{\"from\":-4,\"to\":-5,\"points\":[522.3817240409933,-147.3647295903663,548.6817423862634,-161.18459253203622,576.379286573027,-163.23251276389104,605.443211023256,-153.03700388564278],\"text\":\"other\"},\n{\"from\":-3,\"to\":-7,\"points\":[417.05892750640066,-69.5234109002266,439.71024083052953,-72.02113707812123,480.24639468194454,-68.19749723033027,531.5184245130168,-52.86221352976808],\"text\":\"Digit\"},\n{\"from\":-7,\"to\":-7,\"points\":[573.1197897011658,-28.035418767400756,594.1197897011658,8.337648191545668,534.871191404946,8.337648191545668,555.871191404946,-28.035418767400756],\"text\":\"Digit\"},\n{\"from\":-7,\"to\":-8,\"points\":[597.472556593095,-40.80898319680355,615.5427548686691,-39.41684492158622,628.2679931887328,-32.459843054284484,641.5222419737214,-14.617388600831788],\"text\":\"Dot\"},\n{\"from\":-8,\"to\":-8,\"points\":[660.8496911019575,15.258060007566655,681.8496911019575,51.63112696651308,622.6010928057377,51.63112696651308,643.6010928057377,15.258060007566655],\"text\":\"Digit\"},\n{\"from\":-8,\"to\":-6,\"points\":[662.4767474341895,-14.617388600831788,672.8806571509144,-30.31072644620431,678.2091014569617,-43.669259676580666,683.4463126478852,-72.40701386806052],\"text\":\"other\"},\n{\"from\":-7,\"to\":-9,\"points\":[547.9203828217086,-28.035418767400763,529.0990747101005,-11.508985221328647,514.8781099475997,-6.196117542084194,495.77136656794954,-6.227521426128977],\"text\":\"other\"},\n{\"from\":-3,\"to\":-10,\"points\":[313.2951640786663,-56.20964795434957,262.97837514473264,-48.493685600060175,228.53002698114534,-49.91378292566302,222.50660453180356,-51.53789832550346],\"text\":\"\\\":\\\"\"},\n{\"from\":-10,\"to\":-11,\"points\":[175.53225194444857,-44.743691960673836,161.45807021955122,-23.77903159019871,147.3541380406992,-12.186405298837427,136.10622789172163,-7.986785499075712],\"text\":\":=\"},\n{\"from\":-10,\"to\":-15,\"points\":[165.27805990654565,-74.61914056907227,160.3214305161128,-78.07949268639601,146.63550817270334,-96.05242757015938,133.5407703186549,-128.13800382538898],\"text\":\"other\"},\n{\"from\":-3,\"to\":-3,\"points\":[378.38419220442574,-41.235054616762966,399.38419220442574,-4.861987657816542,330.9698993806412,-4.861987657816542,351.9698993806412,-41.235054616762966],\"text\":\"ws\"},\n{\"from\":-3,\"to\":-12,\"points\":[358.8826755823246,-86.98595183355984,355.78206105743755,-98.30977435909384,353.2715857083538,-135.27579518220105,358.6396059445692,-190.1240279781336],\"text\":\"nl\"},\n{\"from\":-3,\"to\":-13,\"points\":[359.61478722458793,-41.235054616762966,347.33672121906375,10.888802813112521,324.4963239581956,56.27150065839436,291.7964731718538,94.99847317202438],\"text\":\"\\\"+\\\"\"},\n{\"from\":-3,\"to\":-13,\"points\":[343.4083386923749,-41.235054616762966,309.0234762935541,-4.641833255898191,287.74868222652674,40.74532384762839,281.0853260707399,94.99847317202438],\"text\":\"\\\"-\\\"\"},\n{\"from\":-3,\"to\":-13,\"points\":[333.51001615013325,-41.235054616762966,287.87146046484054,-7.855577449600283,268.78233388777255,37.47181653436074,277.10366791087273,94.99847317202438],\"text\":\"\\\"*\\\"\"},\n{\"from\":-3,\"to\":-13,\"points\":[320.54272898590824,-41.235054616762966,263.8455620347653,-11.779226533322541,247.2706811787083,33.46537430051531,273.0277602058667,94.99847317202438],\"text\":\"\\\"/\\\"\"},\n{\"from\":-3,\"to\":-13,\"points\":[313.2951640786663,-45.151381776529625,243.2257896846939,-19.046462397760607,227.01661869153034,27.38588982063323,269.90114138940544,94.99847317202438],\"text\":\"\\\"(\\\"\"},\n{\"from\":-3,\"to\":-13,\"points\":[313.2951640786663,-50.57865392016049,230.16904394818863,-28.376335030145082,212.41609163201957,19.68808537219824,268.31528935520197,94.99847317202438],\"text\":\"\\\")\\\"\"},\n{\"from\":-3,\"to\":-14,\"points\":[324.01503015601907,-86.98595183355984,308.093526745624,-96.21197674371675,285.0186165005401,-118.2044354749172,260.3387094544733,-155.73718388007546],\"text\":\"other\"}\n]}"

function saveCode() {
    let code = myCodeMirror.getValue();
    fetch(window.location + '/saveCode', {
        headers: {
            'Content-Type': 'application/json'
        },
        method: 'POST',
        body: JSON.stringify({ code: code })
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(response.statusText)
            }
            response.json()
                .then(res => {
                    if (res.error) {
                        console.log()
                        throw new Error(res.error.name);
                    } else {
                        Toast.fire({
                            icon: 'success',
                            title: `Код успішно збережено`
                        })
                        myCodeMirror.setValue(res.source);
                    }
                })
                .catch(error => {
                    throw new Error(error)
                })
        })
        .catch(error => {
            Toast.fire({
                icon: 'error',
                title: error
            })
        })
}

async function runCode() {
    const { value: text } = await Swal.fire({
        input: 'textarea',
        inputLabel: 'Перед виконанням вкажіть тестовий код',
        inputPlaceholder: 'Тестовий код...\na = 10\nprint(a)',
        inputAttributes: {
            'aria-label': 'Type your message here'
        },
        showCancelButton: true
    })
    try {
        resultCodeMirror.setValue(`Result: \n` + eval(myCodeMirror.getValue()))
    } catch (error) {
        resultCodeMirror.setValue(`Result: \n` + error.stack)
    }
}

document.addEventListener('DOMContentLoaded', () => {
    myCodeMirror = CodeMirror.fromTextArea(document.getElementById('studentCode'),
        {
            mode: 'javascript',
            lineNumbers: true,
            theme: 'idea'
        });
    const defaultCode = `function getNextState(currentState, symbol){\n    DFA = {\n            "state1": {\n            "a": "state1",\n            "b": "state2",\n            "c": "state3"\n        },\n        "state2": {\n            "a": "state3"\n        }, \n        "state3": {\n            "a": "state3"\n        }\n    }\n    return DFA[currentState][symbol]\n}\n\ngetNextState("state1", "d")`;

    myCodeMirror.setValue(window.project.code);
    myCodeMirror.setSize('100%', '50vh')
    resultCodeMirror = CodeMirror.fromTextArea(document.getElementById('result'), {
        mode: 'javascript',
        lineNumbers: true,
        theme: 'idea'
    })
    resultCodeMirror.setSize('100%', '50vh')
    let automatonStrParagraph = document.getElementById('automatonView');
    automatonStrParagraph.innerText = window.project.automaton.textForm;

    init(chartData);

    document.getElementById('diagram').addEventListener('click', function () {
        document.getElementById('chartContainer').parentElement.style.display = this.checked ? "block" : "none";

    })
    document.getElementById('text').addEventListener('click', function () {
        document.getElementById('automatonView').parentElement.style.display = this.checked ? "block" : "none";
        if (!this.checked) {
            console.log(myDiagram.zoomToFit());
        }
    })


});